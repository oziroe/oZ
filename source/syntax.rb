#!/usr/bin/env ruby
#
# source/syntax.rb
# Since there are so much similarity on each syntax node, and there is no
# good syntax tree generator tool found, so it may be a good idea to write
# a utility to generate all the syntax nodes' source file from yacc's rule.
#
# Created by oziroe on July 25, 2017.
#
require "Date"

yacc_text = File.read(ARGV[0])
rule_text = yacc_text[/.*%%([^%]*)%%.*/, 1]

def rule_text.remove_code_blocks
    level = 0
    self.chars.map do |c|
        if c == '{'
            level += 1
            ''
        elsif c == '}'
            level -= 1
            ''
        else
            level == 0 ? c : ''
        end
    end.join
end
pure_rule = rule_text.remove_code_blocks

rules = pure_rule.split(';').select{ |r| r.strip != '' }
rules_map = {}
rules.each do |rule_text|
    splited = rule_text.split(/(?<!'):(?!')/)  # Ignore quoted ones.
    name, content = splited[0].strip, splited[1]
    rules = content.split('|').map(&:strip)
    rules_map[name] = rules.map(&:split)
end

output_folder, extend_folder = ARGV[1], ARGV[2]
rules_map.each do |name, rules|
    file_name = File.join(output_folder, "#{name}.h")
    File.open(file_name, 'w') do |file|
        file <<
<<-EOF
//
// source/#{output_folder}/#{name}.h
// Auto-generated header file for syntax tree node.
//
// Generated by `source/syntax.rb` on #{Date.today.strftime("%b %-d, %Y")}
//

#ifndef OZ_SOURCE_#{output_folder.upcase}_#{name.upcase}_H
#define OZ_SOURCE_#{output_folder.upcase}_#{name.upcase}_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#{rules.flatten.uniq.select{ |term| rules_map.include?(term) and term != name }
    .map{ |term| "#include \"#{term}.h\""}.join("\n") }
#{File.exist?(File.join(extend_folder, "#{name}.h")) ?
    "#include \"../#{extend_folder}/#{name}.h\"" : ""}



#endif
EOF
    end
end
